?runif
summary(lm(y ~ x1))$coef
summary(lm(y ~ x1 + x2))$coef
par(mfrow = c(1, 2))
plot(x1, y, pch=21,col="black",bg=topo.colors(n)[x2], frame = FALSE, cex = 1.5)
title('Unadjusted, color is X2')
abline(lm(y ~ x1), lwd = 2)
plot(resid(lm(x1 ~ x2)), resid(lm(y ~ x2)), pch = 21, col = "black", bg = "lightblue", frame = FALSE, cex = 1.5)
title('Adjusted')
title('Adjusted')
abline(0, coef(lm(y ~ x1 + x2))[2], lwd = 2)
z <- swiss$Agriculture + swiss$Education
lm(Fertility ~ . + z, data = swiss)
require(datasets);data(InsectSprays)
require(stats); require(graphics)
boxplot(count ~ spray, data = InsectSprays,
xlab = "Type of spray", ylab = "Insect count",
main = "InsectSprays data", varwidth = TRUE, col = "lightgray")
summary(lm(count ~ spray, data = InsectSprays))$coef
summary(lm(count ~
I(1 * (spray == 'B')) + I(1 * (spray == 'C')) +
I(1 * (spray == 'D')) + I(1 * (spray == 'E')) +
I(1 * (spray == 'F'))
, data = InsectSprays))$coef
lm(count ~
I(1 * (spray == 'B')) + I(1 * (spray == 'C')) +
I(1 * (spray == 'D')) + I(1 * (spray == 'E')) +
I(1 * (spray == 'F')) + I(1 * (spray == 'A')), data = InsectSprays)
summary(lm(count ~ spray - 1, data = InsectSprays))$coef
?ave
ave(InsectSprays$count, InsectSprays$spray)
unique(ave(InsectSprays$count, InsectSprays$spray))
spary2 <- relevel(InsectSprays$spray,"C")
spary2
spray2 <- relevel(InsectSprays$spray,"C")
spray2
View(InsectSprays)
summary(lm(count ~ spray2, data = InsectSprays))$coef
spray2
fit <- lm(count ~ spray, data = InsectSprays) #A is ref
bbmbc <- coef(fit)[2] - coef(fit)[3] #B - C
coef(fit)[2]
coef(fit)[3]
temp <- summary(fit)
temp
temp$cov.unscaled[2, 2]
se <- temp$sigma * sqrt(temp$cov.unscaled[2, 2] + temp$cov.unscaled[3,3] - 2 *temp$cov.unscaled[2,3])
t <- (bbmbc) / se
se
t
t <- (bbmbc) / se
t
p <- pt(-abs(t), df = fit$df)
p
out <- c(bbmbc, se, t, p)
ames(out) <- c("B - C", "SE", "T", "P")
names(out) <- c("B - C", "SE", "T", "P")
round(out, 3)
spray2 <- relevel(InsectSprays$spray,"C")
summary(lm(count ~ spray2, data = InsectSprays))$coef
fit$df
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2));
x
t
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
?runif
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3
)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
fit
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
x[1 : (n/2)]
y[1 : (n/2)]
x[(n/2 + 1)
x[(n/2 + 1)
x[(n/2 + 1) : n
]
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), 1.5 + runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 0; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2), .9 + runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- -1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(.5 + runif(n/2), runif(n/2));
beta0 <- 0; beta1 <- 2; tau <- 1; sigma <- .2
y <- beta0 + x * beta1 + t * tau + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t)
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2
)
n <- 100; t <- rep(c(0, 1), c(n/2, n/2)); x <- c(runif(n/2, -1, 1), runif(n/2, -1, 1));
beta0 <- 0; beta1 <- 2; tau <- 0; tau1 <- -4; sigma <- .2
y <- beta0 + x * beta1 + t * tau + t * x * tau1 + rnorm(n, sd = sigma)
plot(x, y, type = "n", frame = FALSE)
abline(lm(y ~ x), lwd = 2)
abline(h = mean(y[1 : (n/2)]), lwd = 3)
abline(h = mean(y[(n/2 + 1) : n]), lwd = 3)
fit <- lm(y ~ x + t + I(x * t))
abline(coef(fit)[1], coef(fit)[2], lwd = 3)
abline(coef(fit)[1] + coef(fit)[3], coef(fit)[2] + coef(fit)[4], lwd = 3)
points(x[1 : (n/2)], y[1 : (n/2)], pch = 21, col = "black", bg = "lightblue", cex = 2)
points(x[(n/2 + 1) : n], y[(n/2 + 1) : n], pch = 21, col = "black", bg = "salmon", cex = 2)
# Simulation 6
p <- 1
n <- 100; x2 <- runif(n); x1 <- p * runif(n) - (1 - p) * x2
beta0 <- 0; beta1 <- 1; tau <- 4 ; sigma <- .01
y <- beta0 + x1 * beta1 + tau * x2 + rnorm(n, sd = sigma)
plot(x1, y, type = "n", frame = FALSE)
abline(lm(y ~ x1), lwd = 2)
co.pal <- heat.colors(n)
points(x1, y, pch = 21, col = "black", bg = co.pal[round((n - 1) * x2 + 1)], cex = 2)
library(rgl)
plot3d(x1, x2, y)
plot(resid(lm(x1 ~ x2)), resid(lm(y ~ x2)), frame = FALSE, col = "black", bg = "lightblue", pch = 21, cex = 2)
abline(lm(I(resid(lm(x1 ~ x2))) ~ I(resid(lm(y ~ x2)))), lwd = 2)
x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
n<- 100; x <- c(10, rnorm(n)); y <- c(10, c(rnorm(n)))
x
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
abline(lm(y ~ x))
?dfbetas
fit <- lm(y ~ x)
fit
?round
round(dfbetas(fit)[1:10,2],3)
dfbetas(fit)[1:10,2]
?dfbetas
?hatvalues
?harvalues
?hatvalues
round(dfbetas(fit)[1:10,2],3)
round(dfbetas(fit)[1:10],3)
dfbetas(fit)
round(dfbetas(fit)[1:10,1],3)
round(dfbetas(fit)[1:10,2],3)
round(dfbetas(fit)[1:10,3],3)
round(dfbetas(fit)[1:10,3],3)
fit
round(hatvalues(fit)[1 : 10], 3)
x <- rnorm(n); y <- x + rnorm(n, sd = .3)
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
x <- c(5, x); y <- c(5, y)
plot(x, y, frame = FALSE, cex = 2, pch = 21, bg = "lightblue", col = "black")
fit2 <- lm(y ~ x)
abline(fit2)
round(dfbetas(fit2)[1 : 10, 2], 3)
round(hatvalues(fit2)[1 : 10], 3)
round(dfbetas(fit)[1:101,2],3)
round(hatvalues(fit)[1 : 10], 3)
round(hatvalues(fit)[1 : 102], 3)
round(hatvalues(fit)[1 : 101], 3)
round(dfbetas(fit2)[1 : 10, 2], 3)
round(hatvalues(fit2)[1 : 10], 3)
dat <- read.table('http://www4.stat.ncsu.edu/~stefanski/NSF_Supported/Hidden_Images/orly_owl_files/orly_owl_Lin_4p_5_flat.txt', header = FALSE)
pairs(dat)
View(dat)
summary(lm(V1 ~ . -1, data = dat))$coef
?predict
?resid
?predict
plot(predict(fit),resid(fit),pch=".")
data(swiss); par(mfrow = c(2,2))
fit <- lm(Fertility ~ ., data = swiss)
plot(fit)
fit
n <- 100; nosim <- 1000
x1 <- rnorm(n); x2 <- rnorm(n); x3 <- rnorm(n);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
View(betas)
?sapply
?apply
round(apply(betas, 1, sd), 5)
?apply
n <- 100; nosim <- 1000
x1 <- rnorm(n); x2 <- x1/sqrt(2) + rnorm(n) /sqrt(2)
x3 <- x1 * 0.95 + rnorm(n) * sqrt(1 - 0.95^2);
betas <- sapply(1 : nosim, function(i){
y <- x1 + rnorm(n, sd = .3)
c(coef(lm(y ~ x1))[2],
coef(lm(y ~ x1 + x2))[2],
coef(lm(y ~ x1 + x2 + x3))[2])
})
round(apply(betas, 1, sd), 5)
View(betas)
apply(betas, 1, sd)
apply(betas, 1, sd)
y <- x1 + rnorm(n, sd = .3)
data(swiss);
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
a <- summary(fit1)$cov.unscaled[2,2]
fit2 <- update(fit, Fertility ~ Agriculture + Examination)
fit3 <- update(fit, Fertility ~ Agriculture + Examination + Education)
c(summary(fit2)$cov.unscaled[2,2],
summary(fit3)$cov.unscaled[2,2]) / a
data(swiss);
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit1
a <- summary(fit1)$cov.unscaled[2,2]
a
fit2 <- update(fit, Fertility ~ Agriculture + Examination)
fit2 <- update(fit1, Fertility ~ Agriculture + Examination)
fit2
fit3 <- update(fit1, Fertility ~ Agriculture + Examination + Education)
fit3
c(summary(fit2)$cov.unscaled[2,2],
summary(fit3)$cov.unscaled[2,2]) / a
library(car)
fit <- lm(Fertility ~.,data = swiss)
?vif
vif(fit)
sqrt(vif(fit))
fit1 <- lm(Fertility ~ Agriculture, data = swiss)
fit3 <- update(fit1, Fertility ~ Agriculture + Examination + Education)
fit5 <- update(fit1, Fertility ~ Agriculture + Examination + Education + Catholic + Infant.Mortality)
anova(fit1, fit3, fit5)
data(mtcar)
data(mtcars)
mtcars
?mrcars
?mtcars
?step
?mtcars
library("knitr", lib.loc="C:/Program Files/R/R-3.1.2/library")
?mtcars
data(mtcars)
mtcars
View(mtcars)
str(mtcars)
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am, labels = c("Automatic","Manual"))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
str(mtcars)
mtcars$am
mtcars$gear
mtcars$carb
boxplot(mpg ~ am, data = mtcars)
boxplot(mpg ~ am, data = mtcars,
xlab = "Transmission Type", ylab = "Mile Per Gallon",
main = "MPG vs Transmission", col = c("salmon","steelblue"))
boxplot(mpg ~ am, data = mtcars,
xlab = "Transmission Type", ylab = "Mile Per Gallon",
main = "MPG vs Transmission", col = c("salmon","steelblue"),
name = c("Automatic","Manual"))
# create boxplot to explore the MPG between different transmission
boxplot(mpg ~ am, data = mtcars,
xlab = "Transmission Type", ylab = "Mile Per Gallon",
main = "MPG vs Transmission", col = c("salmon","steelblue"),
name = c("automatic","manual"))
# create boxplot to explore the MPG between different transmission
boxplot(mpg ~ am, data = mtcars,
xlab = "Transmission Type", ylab = "Mile Per Gallon",
main = "MPG vs Transmission", col = c("salmon","steelblue"),
names = c("automatic","manual"))
?boxplot
boxplot(mpg ~ am, data = mtcars,
xlab = "Transmission Type", ylab = "Mile Per Gallon",
main = "MPG vs Transmission", col = c("salmon","steelblue"))
?mtcar
?mtcars
View(mtcars)
?pairs
pairwise <- pairs(mtcars,main = "Pairwise plot of mtcars")
?pairs
pairwise <- pairs(mtcars,panel = panel.smooth,main = "Pairwise plot of mtcars")
?cov
?cov2cor
cov2cor(cov(sapply(mtcars,as.numeric)))
cov(sapply(mtcars,as.numeric))
allInmodel <-lm(mpg ~., data = mtcars)
summary(allInmodel)
summary(allInmodel)$coef
summary(allInmodel)$coeff
pairwise <- pairs(mtcars,panel = panel.smooth,main = "Pairwise plot of mtcars")
data(mtcars)
# convert qualitative variables to factors
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am, labels = c("Automatic","Manual"))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
# create boxplot to explore the MPG between different transmission
## Figure1
boxplot(mpg ~ am, data = mtcars,
xlab = "Transmission Type", ylab = "Mile Per Gallon",
main = "MPG vs Transmission", col = c("salmon","steelblue"))
# check the correlation between every value
## Figure2
# create a pairwise plot of mtcars
pairwise <- pairs(mtcars,panel = panel.smooth,main = "Pairwise plot of mtcars")
## Figure3
# check the correlation of variances between every value
cov2cor(cov(sapply(mtcars,as.numeric)))
## Figure4
# Model using all value  to find the most significant predictors
allInmodel <-lm(mpg ~., data = mtcars)
summary(allInmodel)$coef
cov2cor(cov(sapply(mtcars,as.numeric)))
allInmodel <-lm(mpg ~., data = mtcars)
summary(allInmodel)$coef
?mtcars
?step
newmodel <- step(lm(mpg ~., data = mtcars))
new_model$coef
newmodel$coef
allInmodel$coef
summary(newmodel)$coef
?anova
summary(newmodel)$r.squared
summary(allInmode)$r.squared
summary(newmodel)$r.squared
allInmodel <-lm(mpg ~., data = mtcars)
summary(allInmodel)$coef
allInmodel$coef
summary(allInmode)$r.squared
summary(newmodel)$r.squared
summary(allInmodel)$r.squared
summary(newmodel)$r.squared
data(mtcars)
# convert qualitative variables to factors
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am, labels = c("Automatic","Manual"))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
# create boxplot to explore the MPG between different transmission
## Figure1
summary(mtcars$mpg[mtcars$am=="Automatic"] )
summary(mtcars$mpg[mtcars$am=="Manual"] )
sd(mtcars$mpg[mtcars$am=="Automatic"])
sd(mtcars$mpg[mtcars$am=="Manual"])
boxplot(mpg ~ am, data = mtcars,
xlab = "Transmission Type", ylab = "Mile Per Gallon",
main = "MPG vs Transmission", col = c("salmon","steelblue"))
# check the correlation between every value
## Figure2
# create a pairwise plot of mtcars
pairwise <- pairs(mtcars,panel = panel.smooth,main = "Pairwise plot of mtcars")
## Figure3
# check the correlation of variances between every value
cov2cor(cov(sapply(mtcars,as.numeric)))
## Figure4
# Using all variables to fit model to find the most significant predictors
allInmodel <-lm(mpg ~., data = mtcars)
summary(allInmodel)$coef
allInmodel$coef
## Figure5
# Comparing two model with "am"" no adjusetd and add "wt" and "hp"
ammodel <- lm(mpg ~ am, data = mtcars))
adjustmodel <- lm(mpg ~ am + wt + hp, data = mtcars)
## Figure6
# calculate R squared in two models and perform the ANOVA.
summary(ammdoel)$r.squared
summary(adjustmodel)$r.squared
anove(ammodel,adjustmodel)
## Figure5
# Comparing two model with "am"" no adjusetd and add "wt" and "hp"
ammodel <- lm(mpg ~ am, data = mtcars)
adjustmodel <- lm(mpg ~ am + wt + hp, data = mtcars)
## Figure6
# calculate R squared in two models and perform the ANOVA.
summary(ammdoel)$r.squared
summary(adjustmodel)$r.squared
anove(ammodel,adjustmodel)
ammodel <- lm(mpg ~ am, data = mtcars)
adjustmodel <- lm(mpg ~ am + wt + hp, data = mtcars)
summary(ammdoel)$r.squared
summary(ammodel)$r.squared
summary(adjustmodel)$r.squared
anova(ammodel,adjustmodel)
?hatvalues
hatvalues(adjustmodel)
plot(adjustmodel)
hist(adjustmodel)$residual
hist(adjustmodel)$residual
par(mfrow = c(2,2))
plot(adjustmodel)
hist(adjustmodel$residual)
par(mfrow = c(2,2))
plot(adjustmodel)
hist(adjustmodel$residual)
par(mfrow = c(2,2))
plot(adjustmodel)
t.test(mpg ~ am, data = mtcars)
data(mtcars)
# convert qualitative variables to factors
mtcars$cyl <- factor(mtcars$cyl)
mtcars$vs <- factor(mtcars$vs)
mtcars$am <- factor(mtcars$am, labels = c("Automatic","Manual"))
mtcars$gear <- factor(mtcars$gear)
mtcars$carb <- factor(mtcars$carb)
# create boxplot to explore the MPG between different transmission
## Figure1
summary(mtcars$mpg[mtcars$am=="Automatic"] )
summary(mtcars$mpg[mtcars$am=="Manual"] )
sd(mtcars$mpg[mtcars$am=="Automatic"])
sd(mtcars$mpg[mtcars$am=="Manual"])
boxplot(mpg ~ am, data = mtcars,
xlab = "Transmission Type", ylab = "Mile Per Gallon",
main = "MPG vs Transmission", col = c("salmon","steelblue"))
# Load packages
require(knitr)
require(markdown)
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("Effective Transmission Type on MPG.rmd")
markdownToHTML('Effective Transmission Type on MPG.md', 'Effective Transmission Type on MPG.html', options=c("use_xhml"))
system("pandoc -s Effective Transmission Type on MPG.html -o Effective Transmission Type on MPG.pdf")
# Load packages
require(knitr)
require(markdown)
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("Effective Transmission Type on MPG.Rmd")
markdownToHTML('Effective Transmission Type on MPG.md', 'Effective Transmission Type on MPG.html', options=c("use_xhml"))
system("pandoc -s Effective Transmission Type on MPG.html -o Effective Transmission Type on MPG.pdf")
# Load packages
require(knitr)
require(markdown)
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("Effective_TransmissionType.rmd")
markdownToHTML('Effective_TransmissionType.md', 'Effective_TransmissionType.html', options=c("use_xhml"))
system("pandoc -s Effective_TransmissionType.html -o Effective_TransmissionType.pdf")
setwd("~/")
setwd("D:/JOHNS HOPKINS Data Science Program/Regression Models/Project")
# Load packages
require(knitr)
require(markdown)
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("Effective_TransmissionType.rmd")
markdownToHTML('Effective_TransmissionType.md', 'Effective_TransmissionType.html', options=c("use_xhml"))
system("pandoc -s Effective_TransmissionType.html -o Effective_TransmissionType.pdf")
# Load packages
require(knitr)
require(markdown)
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("Effective_TransmissionType.rmd")
markdownToHTML('Effective_TransmissionType.md', 'Effective_TransmissionType.html', options=c("use_xhml"))
system("pandoc -s Effective_TransmissionType.html -o Effective_TransmissionType.pdf")
# Load packages
require(knitr)
require(markdown)
# Load packages
require(knitr)
require(markdown)
# Create .md, .html, and .pdf files
knit("Effective_TransmissionType.rmd")
markdownToHTML('Effective_TransmissionType.md', 'Effective_TransmissionType.html', options=c("use_xhml"))
system("pandoc -s Effective_TransmissionType.html -o Effective_TransmissionType.pdf")
